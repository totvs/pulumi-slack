// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package slack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Channel struct {
	Id         string   `pulumi:"id"`
	IsArchived bool     `pulumi:"isArchived"`
	IsPrivate  bool     `pulumi:"isPrivate"`
	Members    []string `pulumi:"members"`
	Name       string   `pulumi:"name"`
	Purpose    *string  `pulumi:"purpose"`
	Topic      *string  `pulumi:"topic"`
}

// ChannelInput is an input type that accepts ChannelArgs and ChannelOutput values.
// You can construct a concrete instance of `ChannelInput` via:
//
//          ChannelArgs{...}
type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(context.Context) ChannelOutput
}

type ChannelArgs struct {
	Id         pulumi.StringInput      `pulumi:"id"`
	IsArchived pulumi.BoolInput        `pulumi:"isArchived"`
	IsPrivate  pulumi.BoolInput        `pulumi:"isPrivate"`
	Members    pulumi.StringArrayInput `pulumi:"members"`
	Name       pulumi.StringInput      `pulumi:"name"`
	Purpose    pulumi.StringPtrInput   `pulumi:"purpose"`
	Topic      pulumi.StringPtrInput   `pulumi:"topic"`
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Channel)(nil)).Elem()
}

func (i ChannelArgs) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i ChannelArgs) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

func (i ChannelArgs) ToChannelPtrOutput() ChannelPtrOutput {
	return i.ToChannelPtrOutputWithContext(context.Background())
}

func (i ChannelArgs) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput).ToChannelPtrOutputWithContext(ctx)
}

// ChannelPtrInput is an input type that accepts ChannelArgs, ChannelPtr and ChannelPtrOutput values.
// You can construct a concrete instance of `ChannelPtrInput` via:
//
//          ChannelArgs{...}
//
//  or:
//
//          nil
type ChannelPtrInput interface {
	pulumi.Input

	ToChannelPtrOutput() ChannelPtrOutput
	ToChannelPtrOutputWithContext(context.Context) ChannelPtrOutput
}

type channelPtrType ChannelArgs

func ChannelPtr(v *ChannelArgs) ChannelPtrInput {
	return (*channelPtrType)(v)
}

func (*channelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *channelPtrType) ToChannelPtrOutput() ChannelPtrOutput {
	return i.ToChannelPtrOutputWithContext(context.Background())
}

func (i *channelPtrType) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelPtrOutput)
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelPtrOutput() ChannelPtrOutput {
	return o.ToChannelPtrOutputWithContext(context.Background())
}

func (o ChannelOutput) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return o.ApplyT(func(v Channel) *Channel {
		return &v
	}).(ChannelPtrOutput)
}
func (o ChannelOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Channel) string { return v.Id }).(pulumi.StringOutput)
}

func (o ChannelOutput) IsArchived() pulumi.BoolOutput {
	return o.ApplyT(func(v Channel) bool { return v.IsArchived }).(pulumi.BoolOutput)
}

func (o ChannelOutput) IsPrivate() pulumi.BoolOutput {
	return o.ApplyT(func(v Channel) bool { return v.IsPrivate }).(pulumi.BoolOutput)
}

func (o ChannelOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Channel) []string { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Channel) string { return v.Name }).(pulumi.StringOutput)
}

func (o ChannelOutput) Purpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Channel) *string { return v.Purpose }).(pulumi.StringPtrOutput)
}

func (o ChannelOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Channel) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type ChannelPtrOutput struct{ *pulumi.OutputState }

func (ChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelPtrOutput) ToChannelPtrOutput() ChannelPtrOutput {
	return o
}

func (o ChannelPtrOutput) ToChannelPtrOutputWithContext(ctx context.Context) ChannelPtrOutput {
	return o
}

func (o ChannelPtrOutput) Elem() ChannelOutput {
	return o.ApplyT(func(v *Channel) Channel { return *v }).(ChannelOutput)
}

func (o ChannelPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ChannelPtrOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Channel) *bool {
		if v == nil {
			return nil
		}
		return &v.IsArchived
	}).(pulumi.BoolPtrOutput)
}

func (o ChannelPtrOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Channel) *bool {
		if v == nil {
			return nil
		}
		return &v.IsPrivate
	}).(pulumi.BoolPtrOutput)
}

func (o ChannelPtrOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Channel) []string {
		if v == nil {
			return nil
		}
		return v.Members
	}).(pulumi.StringArrayOutput)
}

func (o ChannelPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ChannelPtrOutput) Purpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) *string {
		if v == nil {
			return nil
		}
		return v.Purpose
	}).(pulumi.StringPtrOutput)
}

func (o ChannelPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

type User struct {
	Email string `pulumi:"email"`
	Id    string `pulumi:"id"`
	Name  string `pulumi:"name"`
}

// UserInput is an input type that accepts UserArgs and UserOutput values.
// You can construct a concrete instance of `UserInput` via:
//
//          UserArgs{...}
type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(context.Context) UserOutput
}

type UserArgs struct {
	Email pulumi.StringInput `pulumi:"email"`
	Id    pulumi.StringInput `pulumi:"id"`
	Name  pulumi.StringInput `pulumi:"name"`
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (i UserArgs) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i UserArgs) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v User) string { return v.Email }).(pulumi.StringOutput)
}

func (o UserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v User) string { return v.Id }).(pulumi.StringOutput)
}

func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v User) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ChannelOutput{})
	pulumi.RegisterOutputType(ChannelPtrOutput{})
	pulumi.RegisterOutputType(UserOutput{})
}
