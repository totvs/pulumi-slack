# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'LookupUserResult',
    'AwaitableLookupUserResult',
    'lookup_user',
]

@pulumi.output_type
class LookupUserResult:
    def __init__(__self__, user=None):
        if user and not isinstance(user, dict):
            raise TypeError("Expected argument 'user' to be a dict")
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def user(self) -> 'outputs.User':
        return pulumi.get(self, "user")


class AwaitableLookupUserResult(LookupUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return LookupUserResult(
            user=self.user)


def lookup_user(email: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableLookupUserResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['email'] = email
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('slack:index:LookupUser', __args__, opts=opts, typ=LookupUserResult).value

    return AwaitableLookupUserResult(
        user=__ret__.user)
