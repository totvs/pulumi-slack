# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'Channel',
    'User',
]

@pulumi.output_type
class Channel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isArchived":
            suggest = "is_archived"
        elif key == "isPrivate":
            suggest = "is_private"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Channel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Channel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Channel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 is_archived: bool,
                 is_private: bool,
                 name: str,
                 members: Optional[Sequence[str]] = None,
                 purpose: Optional[str] = None,
                 topic: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_archived", is_archived)
        pulumi.set(__self__, "is_private", is_private)
        pulumi.set(__self__, "name", name)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isArchived")
    def is_archived(self) -> bool:
        return pulumi.get(self, "is_archived")

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> bool:
        return pulumi.get(self, "is_private")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def topic(self) -> Optional[str]:
        return pulumi.get(self, "topic")


@pulumi.output_type
class User(dict):
    def __init__(__self__, *,
                 email: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


