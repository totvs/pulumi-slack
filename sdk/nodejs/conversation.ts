// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Conversation extends pulumi.CustomResource {
    /**
     * Get an existing Conversation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Conversation {
        return new Conversation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'slack:index:Conversation';

    /**
     * Returns true if the given object is an instance of Conversation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Conversation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Conversation.__pulumiType;
    }

    public /*out*/ readonly channel!: pulumi.Output<outputs.Channel>;
    public readonly isArchived!: pulumi.Output<boolean | undefined>;
    public readonly isPrivate!: pulumi.Output<boolean | undefined>;
    public readonly members!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly purpose!: pulumi.Output<string | undefined>;
    public readonly topic!: pulumi.Output<string | undefined>;

    /**
     * Create a Conversation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConversationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            inputs["isArchived"] = args ? args.isArchived : undefined;
            inputs["isPrivate"] = args ? args.isPrivate : undefined;
            inputs["members"] = args ? args.members : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["purpose"] = args ? args.purpose : undefined;
            inputs["topic"] = args ? args.topic : undefined;
            inputs["channel"] = undefined /*out*/;
        } else {
            inputs["channel"] = undefined /*out*/;
            inputs["isArchived"] = undefined /*out*/;
            inputs["isPrivate"] = undefined /*out*/;
            inputs["members"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["purpose"] = undefined /*out*/;
            inputs["topic"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Conversation.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Conversation resource.
 */
export interface ConversationArgs {
    isArchived?: pulumi.Input<boolean>;
    isPrivate?: pulumi.Input<boolean>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    purpose?: pulumi.Input<string>;
    topic?: pulumi.Input<string>;
}
